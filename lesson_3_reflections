When would you want to create a remote repository rather than keeping all your work local?
  当我会在不同的地方不同，或者不同的电脑上参与同一项工作，或者与他人分享，或协同完成同一项工作，我会使用远程版本库。

为何你希望始终手动地拉取更改，而不是让 Git 自动与你的远程版本库保持同步？
  为什么呢，这确实是一个问题！

说明Fork、克隆和分支之间的不同。何时使用某种功能而不是另一种？
  Fork是GitHub的一个内置功能，作用是在复制一个版本库到你自己的GitHub账户资料下。
  clone可以克隆一个远程版本库到本地，也可以克隆一个本地的版本库到本地的另一个位置。
  分支是在同一个版本库下操作的，不会创建新的版本库。

  在GitHub上发现被人的版本库并想尝试做一些修改，但由没有权限，使用Fork.
  想获取一个远程版本库到本地，或者复制一分本地的版本库，使用克隆。
  想在同一个版本库中保留正式版本的基础上，添加额外的版本进行 实验性修改，使用分支。

拥有远程分支的上次已知状态的副本（存储在本地）有何好处？
  可以方便查看副本与远程版本库之间的不同，从而分析远程版本库有什么新增修改；同时可以与本地版本库比对，得到上一次与远程版本库同步之后，本地所作的修改。

如何在不使用 Git 或 GitHub 的情况下开展协同？哪种做法更容易？哪种做法更困难？
  可以使用其它版本库管理平台，例如svn。但是如果不使用版本库管理平台，只有定制一套自己的版本库管理解决方案，比如怎么修改内容，怎么合并内容。即便是使用文本比对软件来进行合并操作，也是一件很麻烦的事情。所以我认为，不管使用哪种方法，只要不使用版本库管理平台，都是一件麻烦不容易的事。

何时你会想在独立的分支中而不是直接在 master 中进行更改？两种方法各有何好处？
  主分支是一个相对稳定的版本，而我即将尝试的更改具有不确定性。在不想影响主分支稳定性的前提下，我会创建一个独立的分支进行更改，直到测试达到要求，再将更改合并到主分支中。
  如果直接在主分支中更改，可以避免很多繁琐的操作，比如在用拉取请求合并更改，且遇到需要解决冲突的时候。直接在主分支进行更改，合并解决冲突会简单得多。